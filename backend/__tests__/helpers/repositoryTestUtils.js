function itBehavesLikeARepository(repo, buildEntity) {
  beforeEach(async () => {
    await repo.deleteAll();
  });

  describe("create", () => {
    const entity = buildEntity();

    it("returns the created entity with an autogenerated", async () => {
      const created = await repo.create(entity);
      expect(created).toEqual({ ...entity, id: expect.any(Number) });
    });

    it("always autogenerates ids", async () => {
      const created = await repo.create({ ...entity, id: 1 });
      expect(created.id).not.toEqual(1);
    });

    it("saves the created entity", async () => {
      const created = await repo.create(entity);
      const found = await repo.findById(created.id);
      expect(found).toEqual(created);
    });
  });

  describe("findById", () => {
    let created;
    beforeEach(async () => {
      created = await repo.create(buildEntity());
    });

    describe("when an entity exists with the given id", () => {
      it("return it", async () => {
        const found = await repo.findById(created.id);
        expect(found).toEqual(created);
      });
    });

    describe("when an entity does not exist with the given id", () => {
      beforeEach(async () => {
        await repo.deleteAll();
      });

      it("return undefined", async () => {
        const found = await repo.findById(created.id);
        expect(found).toEqual(undefined);
      });
    });
  });

  describe("list", () => {
    describe("when there are no entities", () => {
      it("return an empty list", async () => {
        const found = await repo.list();
        expect(found).toEqual([]);
      });
    });

    describe("when there are entities", () => {
      let entities;
      beforeEach(async () => {
        entities = [];
        for (let i = 0; i < 4; i++) {
          const created = await repo.create(buildEntity());
          entities.push(created);
        }
      });

      it("return an empty list", async () => {
        const found = await repo.list();
        expect(found).toEqual(entities);
      });
    });
  });

  describe("findByIds", () => {
    let entities;
    beforeEach(async () => {
      entities = [];
      for (let i = 0; i < 4; i++) {
        const created = await repo.create(buildEntity());
        entities.push(created);
      }
    });

    describe("when there are entities that exist", () => {
      it("returns them in order of the ids", async () => {
        const ids = entities.map(e => e.id).reverse();
        const found = await repo.findByIds(ids);
        expect(found).toEqual(entities.reverse());
      });
    });

    describe("when there are entities that do no exist", () => {
      beforeEach(async () => {
        await repo.deleteAll();
      });

      it("returns undefined", async () => {
        const ids = entities.map(e => e.id).reverse();
        const expected = entities.map(e => undefined);
        const found = await repo.findByIds(ids);
        expect(found).toEqual(expected);
      });
    });
  });
}

module.exports = { itBehavesLikeARepository };
